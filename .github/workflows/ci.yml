name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Cancel in-progress runs for the same workflow + branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get project Python version
        id: project_python
        run: |
          # Extract major.minor version from .python-version (e.g., 3.11.8 -> 3.11)
          PROJECT_VERSION=$(cat .python-version | cut -d. -f1,2)
          echo "version=$PROJECT_VERSION" >> $GITHUB_OUTPUT
          echo "Project Python version: $PROJECT_VERSION"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run pytest (with coverage for project Python version)
        run: |
          if [ "${{ matrix.python-version }}" = "${{ steps.project_python.outputs.version }}" ]; then
            echo "Running tests with coverage for Python ${{ matrix.python-version }}"
            uv run pytest tests/ -v --cov=src/jsonstat_validator --cov-report=term-missing --cov-report=xml
          else
            echo "Running tests without coverage for Python ${{ matrix.python-version }}"
            uv run pytest tests/ -v
          fi

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get project Python version
        id: project_python
        run: |
          # Extract major.minor version from .python-version (e.g., 3.11.8 -> 3.11)
          PROJECT_VERSION=$(cat .python-version | cut -d. -f1,2)
          echo "version=$PROJECT_VERSION" >> $GITHUB_OUTPUT
          echo "Using Python $PROJECT_VERSION for linting"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ steps.project_python.outputs.version }}

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run ruff linter
        run: uv run ruff check src/ tests/

      - name: Run ruff formatter check
        run: uv run ruff format --check src/ tests/
