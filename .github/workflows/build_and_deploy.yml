name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags:
      - 'v*'  # Run workflow on version tags (v1.0.0, etc.)
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=90 --statistics
    
    - name: Test with pytest
      run: |
        pytest

  deploy:
    needs: test
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for PyPI trusted publishing
      contents: write  # Required for changelog update
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}  # Explicit token for push permissions
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Setup Git
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Update version in code
      run: |
        # Extract version from the GitHub release tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Setting version to $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
        # Update version in both files
        sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" jsonstat_validator/__init__.py
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
    
    - name: Generate Changelog
      run: |
        # Use the version from the environment
        VERSION=${{ env.VERSION }}
        
        # Get release name and body from the GitHub release
        RELEASE_NAME=$(jq -r .release.name $GITHUB_EVENT_PATH)
        RELEASE_BODY=$(jq -r .release.body $GITHUB_EVENT_PATH)
        
        TODAY=$(date '+%Y-%m-%d')
        
        # If CHANGELOG.md doesn't exist, create it
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        # Create a temporary file with new release information at the top
        echo "# Changelog" > temp_changelog.md
        echo "" >> temp_changelog.md
        echo "## v$VERSION ($TODAY)" >> temp_changelog.md
        echo "" >> temp_changelog.md
        
        if [ -n "$RELEASE_NAME" ] && [ "$RELEASE_NAME" != "v$VERSION" ] && [ "$RELEASE_NAME" != "null" ]; then
          echo "### $RELEASE_NAME" >> temp_changelog.md
          echo "" >> temp_changelog.md
        fi
        
        # Add release description if available
        if [ -n "$RELEASE_BODY" ] && [ "$RELEASE_BODY" != "null" ]; then
          echo "$RELEASE_BODY" >> temp_changelog.md
        else
          # Fallback to commit messages if no release description
          git log $(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD --pretty=format:"- %s" --no-merges >> temp_changelog.md
        fi
        
        echo "" >> temp_changelog.md
        echo "" >> temp_changelog.md
        
        # Append the existing changelog (skipping the title)
        tail -n +3 CHANGELOG.md >> temp_changelog.md 2>/dev/null || true
        
        # Replace the old changelog with the new one
        mv temp_changelog.md CHANGELOG.md
    
    - name: Commit and Push Version and Changelog Updates
      run: |
        git add jsonstat_validator/__init__.py pyproject.toml CHANGELOG.md
        git commit -m "Update version and changelog for v${GITHUB_REF#refs/tags/v}" || echo "No changes to commit"
        git push
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1 