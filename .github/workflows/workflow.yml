name: Test and Deploy

on:
  release:
    types: [published]  # Trigger only when a release is published
  workflow_dispatch:  # Allow manual triggering for testing
    inputs:
      test_mode:
        description: 'Run in test mode (no publishing)'
        type: boolean
        default: true
        required: true
      test_version:
        description: 'Test version (e.g. 0.1.7)'
        type: string
        default: '0.1.7.dev0'
        required: true

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Need write permission to push changes back
    outputs:
      test_branch: ${{ env.TEST_BRANCH }}
      is_test_mode: ${{ env.TEST_MODE }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Extract version from tag or input
        id: extract_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use the test version from the workflow_dispatch input
            VERSION="${{ github.event.inputs.test_version }}"
            echo "TEST_MODE=true" >> $GITHUB_ENV
            
            # Convert dots to dashes for branch name
            BRANCH_VERSION=$(echo $VERSION | tr '.' '-')
            TEST_BRANCH="test-workflow-$BRANCH_VERSION"
            echo "TEST_BRANCH=$TEST_BRANCH" >> $GITHUB_ENV
            
            echo "Using test version: $VERSION (branch: $TEST_BRANCH)"
          else
            # Get the tag (e.g., v1.2.3 or 1.2.3)
            TAG=${GITHUB_REF#refs/tags/}
            # Remove 'v' prefix if present
            VERSION=${TAG#v}
            echo "TEST_MODE=false" >> $GITHUB_ENV
            echo "TEST_BRANCH=" >> $GITHUB_ENV
            echo "Version extracted: $VERSION from tag $TAG"
            
            # Get release information including body/notes
            if [[ "${{ github.event.release.body }}" != "" ]]; then
              echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
              echo "${{ github.event.release.body }}" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
              echo "Release notes found and stored"
            else
              echo "RELEASE_NOTES=Release version $VERSION" >> $GITHUB_ENV
              echo "No release notes found, using default text"
            fi
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Update version in files
        run: |
          # Update version in __init__.py
          sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" jsonstat_validator/__init__.py
          
          # Update version in pyproject.toml
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          
          echo "Updated version to $VERSION in files"
      
      - name: Commit changes
        if: ${{ env.TEST_MODE == 'true' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Test"
          
          # Convert dots to dashes for branch name
          git checkout -b $TEST_BRANCH
          
          git add jsonstat_validator/__init__.py pyproject.toml
          git commit -m "TEST: Bump version to $VERSION"
          git push -f origin $TEST_BRANCH
          echo "Changes pushed to test branch: $TEST_BRANCH"
      
      - name: Commit changes to main
        if: ${{ env.TEST_MODE == 'false' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Get default branch name (usually main or master)
          DEFAULT_BRANCH=$(git remote show origin | grep "HEAD branch" | sed 's/.*: //')
          echo "Default branch is $DEFAULT_BRANCH"
          
          # Fetch and checkout the default branch
          git fetch origin $DEFAULT_BRANCH
          git checkout $DEFAULT_BRANCH
          
          # Apply changes to files
          sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" jsonstat_validator/__init__.py
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          
          # Commit and push changes
          git add jsonstat_validator/__init__.py pyproject.toml
          git commit -m "Bump version to $VERSION"
          git push origin $DEFAULT_BRANCH

  test:
    runs-on: ubuntu-latest
    needs: update-version
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && needs.update-version.outputs.test_branch || github.event.repository.default_branch }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
      - name: Run tests
        run: pytest

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [update-version, test]
    # Skip deployment in test mode
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.test_mode != 'true' }}
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && needs.update-version.outputs.test_branch || github.event.repository.default_branch }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build package
        run: python -m build
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true